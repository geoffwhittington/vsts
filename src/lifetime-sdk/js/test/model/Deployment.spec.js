/**
 * v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LifetimeSdk);
  }
}(this, function(expect, LifetimeSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LifetimeSdk.Deployment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Deployment', function() {
    it('should create an instance of Deployment', function() {
      // uncomment below and update the code to test Deployment
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be.a(LifetimeSdk.Deployment);
    });

    it('should have the property key (base name: "Key")', function() {
      // uncomment below and update the code to test the property key
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property sourceEnvironmentKey (base name: "SourceEnvironmentKey")', function() {
      // uncomment below and update the code to test the property sourceEnvironmentKey
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property targetEnvironmentKey (base name: "TargetEnvironmentKey")', function() {
      // uncomment below and update the code to test the property targetEnvironmentKey
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "Notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property createdOn (base name: "CreatedOn")', function() {
      // uncomment below and update the code to test the property createdOn
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "CreatedBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property createdByUsername (base name: "CreatedByUsername")', function() {
      // uncomment below and update the code to test the property createdByUsername
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property savedOn (base name: "SavedOn")', function() {
      // uncomment below and update the code to test the property savedOn
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property savedBy (base name: "SavedBy")', function() {
      // uncomment below and update the code to test the property savedBy
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property savedByUsername (base name: "SavedByUsername")', function() {
      // uncomment below and update the code to test the property savedByUsername
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property startedOn (base name: "StartedOn")', function() {
      // uncomment below and update the code to test the property startedOn
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property startedBy (base name: "StartedBy")', function() {
      // uncomment below and update the code to test the property startedBy
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property startedByUsername (base name: "StartedByUsername")', function() {
      // uncomment below and update the code to test the property startedByUsername
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property abortedOn (base name: "AbortedOn")', function() {
      // uncomment below and update the code to test the property abortedOn
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property abortedBy (base name: "AbortedBy")', function() {
      // uncomment below and update the code to test the property abortedBy
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property abortedByUsername (base name: "AbortedByUsername")', function() {
      // uncomment below and update the code to test the property abortedByUsername
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property applicationsVersionKeys (base name: "ApplicationsVersionKeys")', function() {
      // uncomment below and update the code to test the property applicationsVersionKeys
      //var instane = new LifetimeSdk.Deployment();
      //expect(instance).to.be();
    });

  });

}));
