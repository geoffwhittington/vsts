/**
 * v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Application', 'model/ApplicationVersion', 'model/ApplicationVersionCreate', 'model/ApplicationVersionKeyRecord', 'model/Deployment', 'model/DeploymentApplicationConflictsRecord', 'model/DeploymentStatusDeploymentLogRecord', 'model/DownloadLink', 'model/Environment', 'model/Module', 'model/ModuleVersion', 'model/NotesSourceEnvironmentKeyTargetEnvironmentKeyApplicationVersionKeysRecord'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Application'), require('../model/ApplicationVersion'), require('../model/ApplicationVersionCreate'), require('../model/ApplicationVersionKeyRecord'), require('../model/Deployment'), require('../model/DeploymentApplicationConflictsRecord'), require('../model/DeploymentStatusDeploymentLogRecord'), require('../model/DownloadLink'), require('../model/Environment'), require('../model/Module'), require('../model/ModuleVersion'), require('../model/NotesSourceEnvironmentKeyTargetEnvironmentKeyApplicationVersionKeysRecord'));
  } else {
    // Browser globals (root is window)
    if (!root.LifetimeSdk) {
      root.LifetimeSdk = {};
    }
    root.LifetimeSdk.V1Api = factory(root.LifetimeSdk.ApiClient, root.LifetimeSdk.Application, root.LifetimeSdk.ApplicationVersion, root.LifetimeSdk.ApplicationVersionCreate, root.LifetimeSdk.ApplicationVersionKeyRecord, root.LifetimeSdk.Deployment, root.LifetimeSdk.DeploymentApplicationConflictsRecord, root.LifetimeSdk.DeploymentStatusDeploymentLogRecord, root.LifetimeSdk.DownloadLink, root.LifetimeSdk.Environment, root.LifetimeSdk.Module, root.LifetimeSdk.ModuleVersion, root.LifetimeSdk.NotesSourceEnvironmentKeyTargetEnvironmentKeyApplicationVersionKeysRecord);
  }
}(this, function(ApiClient, Application, ApplicationVersion, ApplicationVersionCreate, ApplicationVersionKeyRecord, Deployment, DeploymentApplicationConflictsRecord, DeploymentStatusDeploymentLogRecord, DownloadLink, Environment, Module, ModuleVersion, NotesSourceEnvironmentKeyTargetEnvironmentKeyApplicationVersionKeysRecord) {
  'use strict';

  /**
   * V1 service.
   * @module api/V1Api
   * @version 0.0.1
   */

  /**
   * Constructs a new V1Api. 
   * @alias module:api/V1Api
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the applicationsGet operation.
     * @callback module:api/V1Api~applicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given application.
     * @param {String} applicationKey The key of the desired application.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeModules When set to true, the modules details are also retrieved. The default value is false.
     * @param {Boolean} opts.includeEnvStatus When set to true, the application status per environment is also returned. The default value is false.
     * @param {module:api/V1Api~applicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.applicationsGet = function(applicationKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationKey' is set
      if (applicationKey == undefined || applicationKey == null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling applicationsGet");
      }


      var pathParams = {
        'ApplicationKey': applicationKey
      };
      var queryParams = {
        'IncludeModules': opts['includeModules'],
        'IncludeEnvStatus': opts['includeEnvStatus']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/applications/{ApplicationKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsList operation.
     * @callback module:api/V1Api~applicationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of applications that exist in the infrastructure.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeModules When set to true, the modules are also returned. The default value is false.
     * @param {Boolean} opts.includeEnvStatus When set to true, the application status per environment is also returned. The default value is false.
     * @param {module:api/V1Api~applicationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    this.applicationsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'IncludeModules': opts['includeModules'],
        'IncludeEnvStatus': opts['includeEnvStatus']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Application];

      return this.apiClient.callApi(
        '/applications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsVersionsGet operation.
     * @callback module:api/V1Api~applicationsVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given version of the specified application.
     * @param {String} applicationKey The key of the application whose version is being requested.
     * @param {String} versionKey The key of the desired application version.
     * @param {Boolean} includeModules When set to true, the modules details are also retrieved. The default value is false.
     * @param {module:api/V1Api~applicationsVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationVersion}
     */
    this.applicationsVersionsGet = function(applicationKey, versionKey, includeModules, callback) {
      var postBody = null;

      // verify the required parameter 'applicationKey' is set
      if (applicationKey == undefined || applicationKey == null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling applicationsVersionsGet");
      }

      // verify the required parameter 'versionKey' is set
      if (versionKey == undefined || versionKey == null) {
        throw new Error("Missing the required parameter 'versionKey' when calling applicationsVersionsGet");
      }

      // verify the required parameter 'includeModules' is set
      if (includeModules == undefined || includeModules == null) {
        throw new Error("Missing the required parameter 'includeModules' when calling applicationsVersionsGet");
      }


      var pathParams = {
        'ApplicationKey': applicationKey,
        'VersionKey': versionKey
      };
      var queryParams = {
        'IncludeModules': includeModules
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationVersion;

      return this.apiClient.callApi(
        '/applications/{ApplicationKey}/versions/{VersionKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationsVersionsList operation.
     * @callback module:api/V1Api~applicationsVersionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of versions of a given application.
     * @param {String} applicationKey The key of the desired application.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maximumVersionsToReturn The maximum number of versions to return. The default value is 5.
     * @param {module:api/V1Api~applicationsVersionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationVersion>}
     */
    this.applicationsVersionsList = function(applicationKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationKey' is set
      if (applicationKey == undefined || applicationKey == null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling applicationsVersionsList");
      }


      var pathParams = {
        'ApplicationKey': applicationKey
      };
      var queryParams = {
        'MaximumVersionsToReturn': opts['maximumVersionsToReturn']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ApplicationVersion];

      return this.apiClient.callApi(
        '/applications/{ApplicationKey}/versions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsCreate operation.
     * @callback module:api/V1Api~deploymentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a deployment to a target environment. An optional list of applications to include in the deployment can be specified. The input is a subset of deployment object.
     * @param {module:model/NotesSourceEnvironmentKeyTargetEnvironmentKeyApplicationVersionKeysRecord} deploymentData A Deployment record.
     * @param {module:api/V1Api~deploymentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deploymentsCreate = function(deploymentData, callback) {
      var postBody = deploymentData;

      // verify the required parameter 'deploymentData' is set
      if (deploymentData == undefined || deploymentData == null) {
        throw new Error("Missing the required parameter 'deploymentData' when calling deploymentsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/deployments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsDelete operation.
     * @callback module:api/V1Api~deploymentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discards a deployment, if possible. Only deployments whose state is “saved” can be deleted.
     * @param {String} deploymentKey The key of the deployment to delete.
     * @param {module:api/V1Api~deploymentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deploymentsDelete = function(deploymentKey, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentKey' is set
      if (deploymentKey == undefined || deploymentKey == null) {
        throw new Error("Missing the required parameter 'deploymentKey' when calling deploymentsDelete");
      }


      var pathParams = {
        'DeploymentKey': deploymentKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/deployments/{DeploymentKey}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsExecuteCommand operation.
     * @callback module:api/V1Api~deploymentsExecuteCommandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes the given command in a specified deployment. The allowed commands are “start”, “continue” and “abort”.
     * @param {String} deploymentKey The key of the deployment where the command will be executed.
     * @param {String} command The command to execute. One of “start”, “continue” or “abort”. 
     * @param {module:api/V1Api~deploymentsExecuteCommandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deploymentsExecuteCommand = function(deploymentKey, command, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentKey' is set
      if (deploymentKey == undefined || deploymentKey == null) {
        throw new Error("Missing the required parameter 'deploymentKey' when calling deploymentsExecuteCommand");
      }

      // verify the required parameter 'command' is set
      if (command == undefined || command == null) {
        throw new Error("Missing the required parameter 'command' when calling deploymentsExecuteCommand");
      }


      var pathParams = {
        'DeploymentKey': deploymentKey,
        'Command': command
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/deployments/{DeploymentKey}/{Command}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGet operation.
     * @callback module:api/V1Api~deploymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentApplicationConflictsRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given deployment. The returned information contains the included applications and the possible conflicts that can arise from the deployment of the current applications.
     * @param {String} deploymentKey The key of the desired deployment.
     * @param {module:api/V1Api~deploymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentApplicationConflictsRecord}
     */
    this.deploymentsGet = function(deploymentKey, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentKey' is set
      if (deploymentKey == undefined || deploymentKey == null) {
        throw new Error("Missing the required parameter 'deploymentKey' when calling deploymentsGet");
      }


      var pathParams = {
        'DeploymentKey': deploymentKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeploymentApplicationConflictsRecord;

      return this.apiClient.callApi(
        '/deployments/{DeploymentKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsGetStatus operation.
     * @callback module:api/V1Api~deploymentsGetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentStatusDeploymentLogRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given deployment execution, including the deployment status and messages.
     * @param {String} deploymentKey The key of the deployment whose status is being requested.
     * @param {module:api/V1Api~deploymentsGetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentStatusDeploymentLogRecord}
     */
    this.deploymentsGetStatus = function(deploymentKey, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentKey' is set
      if (deploymentKey == undefined || deploymentKey == null) {
        throw new Error("Missing the required parameter 'deploymentKey' when calling deploymentsGetStatus");
      }


      var pathParams = {
        'DeploymentKey': deploymentKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeploymentStatusDeploymentLogRecord;

      return this.apiClient.callApi(
        '/deployments/{DeploymentKey}/status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsList operation.
     * @callback module:api/V1Api~deploymentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of deployments ordered by creation date, from newest to oldest.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.minDate The minimum creation date of the deployments to return. The default value is 1 week before the current date.
     * @param {Date} opts.maxDate The maximum creation date of the deployments to return. The default value is the current date.
     * @param {module:api/V1Api~deploymentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    this.deploymentsList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'MinDate': opts['minDate'],
        'MaxDate': opts['maxDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Deployment];

      return this.apiClient.callApi(
        '/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentsUpdate operation.
     * @callback module:api/V1Api~deploymentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a given deployment. An optional list of applications to include in the deployment can be specified. The input is a subset of deployment object.
     * @param {String} deploymentKey The key of the deployment to update.
     * @param {module:model/NotesSourceEnvironmentKeyTargetEnvironmentKeyApplicationVersionKeysRecord} deploymentData The deployment information to update.
     * @param {module:api/V1Api~deploymentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    this.deploymentsUpdate = function(deploymentKey, deploymentData, callback) {
      var postBody = deploymentData;

      // verify the required parameter 'deploymentKey' is set
      if (deploymentKey == undefined || deploymentKey == null) {
        throw new Error("Missing the required parameter 'deploymentKey' when calling deploymentsUpdate");
      }

      // verify the required parameter 'deploymentData' is set
      if (deploymentData == undefined || deploymentData == null) {
        throw new Error("Missing the required parameter 'deploymentData' when calling deploymentsUpdate");
      }


      var pathParams = {
        'DeploymentKey': deploymentKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deployment;

      return this.apiClient.callApi(
        '/deployments/{DeploymentKey}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloads operation.
     * @callback module:api/V1Api~downloadsCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @hide This is a method use only to actually download the files is not really an API method.
     * @param {String} downloadKey 
     * @param {module:api/V1Api~downloadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.downloads = function(downloadKey, callback) {
      var postBody = null;

      // verify the required parameter 'downloadKey' is set
      if (downloadKey == undefined || downloadKey == null) {
        throw new Error("Missing the required parameter 'downloadKey' when calling downloads");
      }


      var pathParams = {
        'DownloadKey': downloadKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/octet-stream'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/downloads/{DownloadKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsApplicationsVersionsCreate operation.
     * @callback module:api/V1Api~environmentsApplicationsVersionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationVersionKeyRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new version of the application based on the current running application.
     * @param {String} environmentKey The key of the environment from which to get the application.
     * @param {String} applicationKey The key of the application for which to generate a new version.
     * @param {module:model/ApplicationVersionCreate} applicationVersionCreate A structure holding the new version name for the application and for its native applications, if applicable.
     * @param {module:api/V1Api~environmentsApplicationsVersionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationVersionKeyRecord}
     */
    this.environmentsApplicationsVersionsCreate = function(environmentKey, applicationKey, applicationVersionCreate, callback) {
      var postBody = applicationVersionCreate;

      // verify the required parameter 'environmentKey' is set
      if (environmentKey == undefined || environmentKey == null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling environmentsApplicationsVersionsCreate");
      }

      // verify the required parameter 'applicationKey' is set
      if (applicationKey == undefined || applicationKey == null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling environmentsApplicationsVersionsCreate");
      }

      // verify the required parameter 'applicationVersionCreate' is set
      if (applicationVersionCreate == undefined || applicationVersionCreate == null) {
        throw new Error("Missing the required parameter 'applicationVersionCreate' when calling environmentsApplicationsVersionsCreate");
      }


      var pathParams = {
        'EnvironmentKey': environmentKey,
        'ApplicationKey': applicationKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationVersionKeyRecord;

      return this.apiClient.callApi(
        '/environments/{EnvironmentKey}/applications/{ApplicationKey}/versions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsDownloadRunningApp operation.
     * @callback module:api/V1Api~environmentsDownloadRunningAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a link where the binary file for a given application can be downloaded. The link will expire in 60 minutes.
     * @param {String} environmentKey The key of the environment from which to get the application binary file link.
     * @param {String} applicationKey The key of the application for which to get the binary file link.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type The type of binary file to return, when applicable. One of “oap”, “apk” or “ipa”. (default to )
     * @param {module:api/V1Api~environmentsDownloadRunningAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadLink}
     */
    this.environmentsDownloadRunningApp = function(environmentKey, applicationKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'environmentKey' is set
      if (environmentKey == undefined || environmentKey == null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling environmentsDownloadRunningApp");
      }

      // verify the required parameter 'applicationKey' is set
      if (applicationKey == undefined || applicationKey == null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling environmentsDownloadRunningApp");
      }


      var pathParams = {
        'EnvironmentKey': environmentKey,
        'ApplicationKey': applicationKey
      };
      var queryParams = {
        'Type': opts['type']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DownloadLink;

      return this.apiClient.callApi(
        '/environments/{EnvironmentKey}/applications/{ApplicationKey}/content/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsGet operation.
     * @callback module:api/V1Api~environmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given environment.
     * @param {String} environmentKey The key of the desired environment.
     * @param {module:api/V1Api~environmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    this.environmentsGet = function(environmentKey, callback) {
      var postBody = null;

      // verify the required parameter 'environmentKey' is set
      if (environmentKey == undefined || environmentKey == null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling environmentsGet");
      }


      var pathParams = {
        'EnvironmentKey': environmentKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Environment;

      return this.apiClient.callApi(
        '/environments/{EnvironmentKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsGetRunningApp operation.
     * @callback module:api/V1Api~environmentsGetRunningAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the running version of the specified application in a given environment.
     * @param {String} environmentKey The key of the environment from which to get the running application details.
     * @param {String} applicationKey The key of the application whose details are being requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeEnvStatus When set to true, the applications’ status information in the environment is included in the result. The default value is false.
     * @param {Boolean} opts.includeModules When set to true, the modules details are also retrieved. The default value is false.
     * @param {module:api/V1Api~environmentsGetRunningAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.environmentsGetRunningApp = function(environmentKey, applicationKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'environmentKey' is set
      if (environmentKey == undefined || environmentKey == null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling environmentsGetRunningApp");
      }

      // verify the required parameter 'applicationKey' is set
      if (applicationKey == undefined || applicationKey == null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling environmentsGetRunningApp");
      }


      var pathParams = {
        'EnvironmentKey': environmentKey,
        'ApplicationKey': applicationKey
      };
      var queryParams = {
        'IncludeEnvStatus': opts['includeEnvStatus'],
        'IncludeModules': opts['includeModules']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/environments/{EnvironmentKey}/applications/{ApplicationKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsGetRunningApps operation.
     * @callback module:api/V1Api~environmentsGetRunningAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the running versions of all applications in a given environment.
     * @param {String} environmentKey The key of the environment whose list of running applications is being requested.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeModules When set to true, the modules details are also retrieved. The default value is false.
     * @param {Boolean} opts.includeEnvStatus When set to true, the applications’ status information in the environment is included in the result. The default value is false.
     * @param {module:api/V1Api~environmentsGetRunningAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    this.environmentsGetRunningApps = function(environmentKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'environmentKey' is set
      if (environmentKey == undefined || environmentKey == null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling environmentsGetRunningApps");
      }


      var pathParams = {
        'EnvironmentKey': environmentKey
      };
      var queryParams = {
        'IncludeModules': opts['includeModules'],
        'IncludeEnvStatus': opts['includeEnvStatus']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Application];

      return this.apiClient.callApi(
        '/environments/{EnvironmentKey}/applications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsList operation.
     * @callback module:api/V1Api~environmentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Environment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the environments in the infrastructure.
     * @param {module:api/V1Api~environmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Environment>}
     */
    this.environmentsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Environment];

      return this.apiClient.callApi(
        '/environments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moduleVersionGet operation.
     * @callback module:api/V1Api~moduleVersionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModuleVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given module version.
     * @param {String} moduleKey The module from where to retrieve the versions from.
     * @param {String} moduleVersionKey Key of the module version to return.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePublicElements Boolean to indicate if public elements should be returned. Default is false.
     * @param {Boolean} opts.includeConsumedElements Boolean to indicate if consumed elements should be returned. Default is false.
     * @param {module:api/V1Api~moduleVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModuleVersion}
     */
    this.moduleVersionGet = function(moduleKey, moduleVersionKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'moduleKey' is set
      if (moduleKey == undefined || moduleKey == null) {
        throw new Error("Missing the required parameter 'moduleKey' when calling moduleVersionGet");
      }

      // verify the required parameter 'moduleVersionKey' is set
      if (moduleVersionKey == undefined || moduleVersionKey == null) {
        throw new Error("Missing the required parameter 'moduleVersionKey' when calling moduleVersionGet");
      }


      var pathParams = {
        'ModuleKey': moduleKey,
        'ModuleVersionKey': moduleVersionKey
      };
      var queryParams = {
        'IncludePublicElements': opts['includePublicElements'],
        'IncludeConsumedElements': opts['includeConsumedElements']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModuleVersion;

      return this.apiClient.callApi(
        '/modules/{ModuleKey}/versions/{ModuleVersionKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moduleVersionsList operation.
     * @callback module:api/V1Api~moduleVersionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModuleVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of versions of a given module.
     * @param {String} moduleKey The module from where to retrieve the versions from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePublicElements Boolean to indicate if public elements should be returned. Default is false.
     * @param {Boolean} opts.includeConsumedElements Boolean to indicate if consumed elements should be returned. Default is false.
     * @param {Number} opts.maximumVersionsToReturn Maximum number of versions to return. Default is 5.
     * @param {module:api/V1Api~moduleVersionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModuleVersion>}
     */
    this.moduleVersionsList = function(moduleKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'moduleKey' is set
      if (moduleKey == undefined || moduleKey == null) {
        throw new Error("Missing the required parameter 'moduleKey' when calling moduleVersionsList");
      }


      var pathParams = {
        'ModuleKey': moduleKey
      };
      var queryParams = {
        'IncludePublicElements': opts['includePublicElements'],
        'IncludeConsumedElements': opts['includeConsumedElements'],
        'MaximumVersionsToReturn': opts['maximumVersionsToReturn']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ModuleVersion];

      return this.apiClient.callApi(
        '/modules/{ModuleKey}/versions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modulesGet operation.
     * @callback module:api/V1Api~modulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Module} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a given module.
     * @param {String} moduleKey Key of the module to list the details from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeEnvStatus When set to true, the module status per environment is also returned. The default value is false.
     * @param {module:api/V1Api~modulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Module}
     */
    this.modulesGet = function(moduleKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'moduleKey' is set
      if (moduleKey == undefined || moduleKey == null) {
        throw new Error("Missing the required parameter 'moduleKey' when calling modulesGet");
      }


      var pathParams = {
        'ModuleKey': moduleKey
      };
      var queryParams = {
        'IncludeEnvStatus': opts['includeEnvStatus']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Module;

      return this.apiClient.callApi(
        '/modules/{ModuleKey}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modulesList operation.
     * @callback module:api/V1Api~modulesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Module>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of modules that exist in the infrastructure.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeEnvStatus When set to true, the module status per environment is also returned. The default value is false.
     * @param {module:api/V1Api~modulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Module>}
     */
    this.modulesList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'IncludeEnvStatus': opts['includeEnvStatus']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Module];

      return this.apiClient.callApi(
        '/modules/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
